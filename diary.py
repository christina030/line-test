# -*- coding: utf-8 -*-
"""line_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B5YIFkOz7eBNED_SmQvkQ6vNhTayOu8n

# 開發環境
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

!mkdir -p /drive
#umount /drive
!mount --bind /content/drive/My\ Drive /drive
!mkdir -p /drive/ngrok-ssh
!mkdir -p ~/.ssh

# Commented out IPython magic to ensure Python compatibility.
!mkdir -p /drive/ngrok-ssh
# %cd /drive/ngrok-ssh
!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -O ngrok-stable-linux-amd64.zip
!unzip -u ngrok-stable-linux-amd64.zip
!cp /drive/ngrok-ssh/ngrok /ngrok
!chmod +x /ngrok

"""# 環境"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

!cd /content/drive/MyDrive/ngrok-ssh
!cp /content/drive/MyDrive/ngrok-ssh/ngrok /ngrok
!chmod +x /ngrok
!/ngrok authtoken 2czLN9T3Sh1w6WsYzoOprMD8LcV_4zspAxicLu7TBjVwfJjkd

!pip install flask-ngrok
!pip install pyngrok==4.1.1
!ngrok authtoken 2czLN9T3Sh1w6WsYzoOprMD8LcV_4zspAxicLu7TBjVwfJjkd

!pip install flask_ngrok

from flask import Flask
from flask_ngrok import run_with_ngrok

app = Flask(__name__)
run_with_ngrok(app)

@app.route("/<name>")
def home(name):
    return f"<h1>hello {name}</h1>"

app.run()

!pip install line-bot-sdk

access_token = '3LeZwHlvuevlxuX8mg9yqjGWURaxiwAjeYJPJITdOxSSI12YLD7Hc89bTHE18/iC/y2id/H1HPiyzKtdgtMHQAWUA4APb75NpEl0elXUORyKy2eb3RSrG472wiL7fm5YYkZaSYNEueoq+NkIVaIJAAdB04t89/1O/w1cDnyilFU='
secret = '7b259d4722d58e42f88109fbec18ae55'

shared_folder='/content/drive/MyDrive/Line/share'

access_token = '9YC946tgm8aT4PLC3ZcTqUKGdAwIqDgxW6ROgl7E90pGjf7hb3YwYCaVyqEGA0D8MGZZeaSooq6EtesW1v5qkdnOv0QYth8A6q3XXCC0Lv80w72rgzxiywZ29uvEJg6ZP+TQST0Dr7R26+rFQYMM9AdB04t89/1O/w1cDnyilFU='
secret = '9afeea16902f4bbe393fa54bb805e17e'

shared_folder='/content/drive/MyDrive/Line/share'

"""# 建立圖文選單

[建立圖文選單](https://steam.oxxostudio.tw/category/python/example/line-rich-menu.html)

[actions](https://developers.line.biz/en/reference/messaging-api/#postback-action)
"""

import requests
import json

headers = {'Authorization':f'Bearer {access_token}'}

req = requests.request('GET', 'https://api.line.me/v2/bot/richmenu/alias/list',
                      headers=headers)

print(req.text)

import requests, json
headers = {'Authorization': f'Bearer {access_token}', 'Content-Type':'application/json'}

body = {
    'size': {'width': 1370, 'height': 916},   # 設定尺寸
    'selected': 'true',                        # 預設是否顯示
    'name': 'menu',                             # 選單名稱 ( 別名 Alias Id )
    'chatBarText': '小雲朵選單',                    # 選單在 LINE 顯示的標題
    'areas':[                                  # 選單內容
        {
          'bounds': {'x': 163, 'y': 18, 'width':430, 'height': 430},
          'action': {'type': 'richmenuswitch', 'richMenuAliasId': 'diary', 'data':'change-to-diary'} # 按鈕 B 使用 richmenuswitch
        },                                # 選單內容
        {
          'bounds': {'x': 163, 'y': 465, 'width':430, 'height': 430},
          'action': {'type': 'postback', 'data':'change-to-plant', 'displayText': '植栽'} # 按鈕 B 使用 richmenuswitch
        },                                # 選單內容
        {
          'bounds': {'x': 762, 'y': 18, 'width':430, 'height': 430},
          'action': {'type': 'postback', 'data':'change-to-calendar', 'displayText': '月曆'} # 按鈕 B 使用 richmenuswitch
        },                                # 選單內容
        {
          'bounds': {'x': 762, 'y': 465, 'width':430, 'height': 430},
          'action': {'type': 'postback', 'data':'change-to-help', 'displayText': '小雲朵'} # 按鈕 B 使用 richmenuswitch
        },
    ]
  }
req = requests.request('POST', 'https://api.line.me/v2/bot/richmenu',
                      headers=headers,data=json.dumps(body).encode('utf-8'))
print(req.text)

richMenuId = req.json()['richMenuId']
print(richMenuId)

from linebot import LineBotApi, WebhookHandler

line_bot_api = LineBotApi(access_token)

with open('/content/drive/MyDrive/Line/list.jpg', 'rb') as f:
    line_bot_api.set_rich_menu_image(richMenuId, 'image/jpeg', f)

import requests

headers = {'Authorization':f'Bearer {access_token}'}

req = requests.request('POST', 'https://api.line.me/v2/bot/user/all/richmenu/{richMenuId}', headers=headers)

print(req.text)

import requests
import json

headers = {'Authorization':f'Bearer {access_token}'}

params = {
    "richMenuAliasId": "menu"
}

req = requests.request('DELETE', 'https://api.line.me/v2/bot/richmenu/alias/menu',
                      headers=headers, params=json.dumps(params).encode('utf-8'))

print(req.text)

import requests
import json

headers = {'Authorization':f'Bearer {access_token}', 'Content-Type':'application/json'}

body = {
    "richMenuAliasId": "menu",
    "richMenuId": richMenuId
}

req = requests.request('POST', 'https://api.line.me/v2/bot/richmenu/alias',
                      headers=headers, data=json.dumps(body).encode('utf-8'))

print(req.text)

import requests

headers = {'Authorization': f'Bearer {access_token}', 'Content-Type':'application/json'}

req = requests.request('POST', f'https://api.line.me/v2/bot/user/all/richmenu/{richMenuId}', headers=headers)

print(req.text)

import requests
import json
# 設定 headers，輸入你的 Access Token，記得前方要加上「Bearer 」( 有一個空白 )
headers = {'Authorization': f'Bearer {access_token}', 'Content-Type':'application/json'}

body = {
    'size': {'width': 2500, 'height': 1686},   # 設定尺寸
    'selected': 'true',                        # 預設是否顯示
    'name': 'diary',                   # 選單名稱
    'chatBarText': '心情日記',            # 選單在 LINE 顯示的標題
    'areas':[                                  # 選單內容
        {
          'bounds': {'x': 136, 'y': 700, 'width': 284, 'height': 284}, # 選單位置與大小
          'action': {
                "type": "postback",
                "label": "Mood",
                "data": "action=diary&mood=1",
                # "displayText": "1",
                "inputOption": "openKeyboard",
                "fillInText": "---\n想記錄的話：\n---\n"
                }                # 點擊後傳送文字
        },
        {
          'bounds': {'x': 485, 'y': 434, 'width': 284, 'height': 284},
          'action': {
                "type": "postback",
                "label": "Mood",
                "data": "action=diary&mood=2",
                # "displayText": "2",
                "inputOption": "openKeyboard",
                "fillInText": "---\n想記錄的話：\n---\n"
                }
        },
        {
          'bounds': {'x': 895, 'y': 291, 'width': 284, 'height': 284},
          'action': {
                "type": "postback",
                "label": "Mood",
                "data": "action=diary&mood=3",
                # "displayText": "3",
                "inputOption": "openKeyboard",
                "fillInText": "---\n想記錄的話：\n---\n"
                }
        },
        {
          'bounds': {'x': 1314, 'y': 291, 'width': 284, 'height': 284},
          'action': {
                "type": "postback",
                "label": "Mood",
                "data": "action=diary&mood=4",
                # "displayText": "4",
                "inputOption": "openKeyboard",
                "fillInText": "---\n想記錄的話：\n---\n"
                }
        },
        {
          'bounds': {'x': 1727, 'y': 434, 'width': 284, 'height': 284},
          'action': {
                "type": "postback",
                "label": "Mood",
                "data": "action=diary&mood=5",
                # "displayText": "5",
                "inputOption": "openKeyboard",
                "fillInText": "---\n想記錄的話：\n---\n"
                }
        },
        {
          'bounds': {'x': 2073, 'y': 700, 'width': 284, 'height': 284},
          'action': {
                "type": "postback",
                "label": "Mood",
                "data": "action=diary&mood=6",
                # "displayText": "6",
                "inputOption": "openKeyboard",
                "fillInText": "---\n想記錄的話：\n---\n"
                }
        },
        {
          'bounds': {'x': 0, 'y': 1200, 'width': 2500, 'height': 486},
          'action': {'type': 'richmenuswitch', 'richMenuAliasId': 'menu', 'data':'change-to-menu'} # 按鈕 B 使用 richmenuswitch
        }
    ]
  }
# 向指定網址發送 request
req = requests.request('POST', 'https://api.line.me/v2/bot/richmenu',
                      headers=headers,data=json.dumps(body).encode('utf-8'))
# 印出得到的結果
print(req.text)

richMenuId = req.json()['richMenuId']
print(richMenuId)

from linebot import LineBotApi, WebhookHandler

line_bot_api = LineBotApi(access_token)

with open('/content/drive/MyDrive/Line/image.jpg', 'rb') as f:
    line_bot_api.set_rich_menu_image(richMenuId, 'image/jpeg', f)

import requests
import json

headers = {'Authorization':f'Bearer {access_token}'}

params = {
    "richMenuAliasId": "diary"
}

req = requests.request('DELETE', 'https://api.line.me/v2/bot/richmenu/alias/diary',
                      headers=headers, params=json.dumps(params).encode('utf-8'))

print(req.text)

import requests
import json

headers = {'Authorization':f'Bearer {access_token}', 'Content-Type':'application/json'}

body = {
    "richMenuAliasId": "diary",
    "richMenuId": richMenuId
}

req = requests.request('POST', 'https://api.line.me/v2/bot/richmenu/alias',
                      headers=headers, data=json.dumps(body).encode('utf-8'))

print(req.text)

import requests

headers = {'Authorization':f'Bearer {access_token}', 'Content-Type':'application/json'}

req = requests.request('POST', f'https://api.line.me/v2/bot/user/all/richmenu/{richMenuId}', headers=headers)

print(req.text)

"""# 回覆圖片或影片訊息"""

diary_mood = ['action=diary&mood=1', 'action=diary&mood=2', 'action=diary&mood=3', 'action=diary&mood=4', 'action=diary&mood=5', 'action=diary&mood=6']

!pip install pyimgur

"""[圖片URL](https://medium.com/@fidhaley/line-bot-python-%E5%BB%BA%E7%AB%8B%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E5%80%8Bapp-3-linebot%E6%96%87%E5%AD%97%E6%8C%87%E4%BB%A4-%E5%AD%98%E5%8F%96%E5%9C%96%E7%89%87-%E6%9B%B4%E6%8F%9B%E6%A9%9F%E5%99%A8%E4%BA%BA%E5%A4%A7%E9%A0%AD%E8%B2%BC%E6%95%88%E6%9E%9C-1cbb61647d60)"""

import pyimgur

client_id = 'bde19e3500c4e17'
def glucose_graph(client_id, imgpath):
    im = pyimgur.Imgur(client_id)
    upload_image = im.upload_image(imgpath, title='Uploaded with PyImgur')
    return upload_image.link

"""[自動回覆圖片](https://steam.oxxostudio.tw/category/python/example/line-reply-message.html)

[編輯圖片](https://blog.gtwang.org/programming/opencv-drawing-functions-tutorial/)
"""

from linebot.models import TextSendMessage, ImageSendMessage    # 載入 TextSendMessage 和 ImageSendMessage 模組
import os
import cv2
from PIL import ImageFont, ImageDraw, Image
import numpy as np
import datetime


# 建立回覆圖片的函式
def reply_img(tk, text, mood, folder=shared_folder, fontsize=72, color=(255,255,255), margin=20, linewidth=5, fontPath='/content/drive/MyDrive/Line/CHENYULUOYAN-THIN-MONOSPACED.TTF'):
    # 文字對應圖片網址的字典
    # img = [
    #     'https://drive.google.com/uc?export=view&id=1ITxUYijbnQeussfTdCv-L8OKRWx_OXAq',
    #     'https://drive.google.com/uc?export=view&id=1oOV2Iwv2dJoM6k0gNET85dfAaVjVmLF6',
    #     'https://drive.google.com/uc?export=view&id=1lZWBwRvOMSaxuneo1XgmyofVPwg0ScLG',
    #     'https://drive.google.com/uc?export=view&id=1xX4A_6ZCRHnMt_57kNwRpyryEttUH91Y',
    #     'https://drive.google.com/uc?export=view&id=1wl0Z2GFbwA4D2kofydDVDw2YZoH72qX6',
    #     'https://drive.google.com/uc?export=view&id=1rr7bC-bUud6Rqhw8CnmMXfXsdBf3PJHn'
    # ]
    img = [
        'img1.jpg',
        'img2.jpg',
        'img3.jpg',
        'img4.jpg',
        'img5.jpg',
        'img6.jpg'
    ]

    bg = cv2.imread(os.path.join(folder, img[mood]))

    text = text[15:]
    text = text.split('\n')
    today = datetime.date.today()
    date = f'{today.year} . {today.month} . {today.day}'

    font = ImageFont.truetype(fontPath, fontsize)
    imgPil = Image.fromarray(bg)
    draw = ImageDraw.Draw(imgPil)
    h, w, _ = bg.shape
    # x = w // 2 - (fontsize * len(text) // 2)
    for i, line in enumerate(text):
        x = w - margin - (i+1) * (fontsize + linewidth)
        y = margin + linewidth

        for c in line:
            draw.text((x, y), c, font=font, fill=color)
            y += fontsize

    # draw.text((x, 120), text, font=font, fill=color)
    draw.text((margin, h-fontsize-10),  date, font=font, fill=(52, 75, 91))

    imgCv2 = np.array(imgPil)

    imgSavePath = os.path.join(folder, tk + '_diary.jpg')
    cv2.imwrite(imgSavePath, imgCv2)

    img_url = glucose_graph(client_id, imgSavePath)

    if mood < len(img):
      return (img_url, imgSavePath)
    else:
      # 如果找不到對應的圖片，回傳 False
      return False


def handle_diary(tk, userID, text, mood, line_bot_api):
    print('Text: ', text)
    if "---\n想記錄的話：\n---\n" in text:
        img_url = reply_img(tk, text, mood)   # 取得對應的圖片，如果沒有取得，會是 False
        print(img_url)
        if img_url:
            # 如果有圖片網址，回傳圖片
            img_message = ImageSendMessage(original_content_url=img_url[0], preview_image_url=img_url[0])
            line_bot_api.reply_message(tk, img_message)
            os.system(f'rm {img_url[1]}')

            save_mood(userID, mood)
        else:
            # 如果是 False，回傳文字
            text_message = TextSendMessage(text='找不到相關日記圖片')
            line_bot_api.reply_message(tk, text_message)
    else:
        text_message = TextSendMessage(text='請保留\n---\n想記錄的話：\n---\n')
        line_bot_api.reply_message(tk, text_message)

"""# 種子"""

!touch '/content/drive/MyDrive/Line/share/mood_scores.pkl'
!touch '/content/drive/MyDrive/Line/share/users.pkl'
!touch '/content/drive/MyDrive/Line/share/action_done.pkl'

import pickle

msgs = {}

with open('/content/drive/MyDrive/Line/share/mood_scores.pkl', 'wb') as f:
    pickle.dump(msgs, f)

msgs = {}

with open('/content/drive/MyDrive/Line/share/users.pkl', 'wb') as f:
    pickle.dump(msgs, f)

msgs = {}

with open('/content/drive/MyDrive/Line/share/action_done.pkl', 'wb') as f:
    pickle.dump(msgs, f)

grow_days = [5, 10, 20, 30]
mood_ranges = [[8, 16], [10, 20], [20, 40], [20, 40]]

import pickle
import os
import datetime
import cv2
from linebot.models import TextSendMessage, ImageSendMessage    # 載入 TextSendMessage 和 ImageSendMessage 模組


def save_mood(userID, mood, folder=shared_folder, mood_filename='mood_scores.pkl', action_filename='action_done.pkl'):
    # check if action done
    action_done = None
    with open(os.path.join(folder, action_filename), 'rb') as f:
        action_done = pickle.load(f)

    today = datetime.date.today()
    if action_done[userID] == today:
        not_done = False
    else:
        action_done[userID] = today
        with open(os.path.join(folder, action_filename), 'wb') as f:
            pickle.dump(action_done, f)
        not_done = True

    # change mood score
    if not_done:
        mood_scores = None
        with open(os.path.join(folder, mood_filename), 'rb') as f:
            mood_scores = pickle.load(f)

        mood_scores[userID][-1] += (mood + 1)
        print(userID, '分數：', mood_scores[userID][-1])

        with open(os.path.join(folder, mood_filename), 'wb') as f:
            pickle.dump(mood_scores, f)


def handle_grow(tk, userID, line_bot_api, folder=shared_folder, user_filename='users.pkl', mood_filename='mood_scores.pkl'):
    users = None
    mood_scores = None
    with open(os.path.join(folder, user_filename), 'rb') as f:
        users = pickle.load(f)
    with open(os.path.join(folder, mood_filename), 'rb') as f:
        mood_scores = pickle.load(f)

    today = datetime.date.today()
    days = (today - users[userID]).days

    if days in grow_days:
        mood_scores[userID].append(0)

    with open(os.path.join(folder, mood_filename), 'wb') as f:
        pickle.dump(mood_scores, f)

    print(f'第{days}天', userID)
    img_url = grow_plant(tk, mood_scores[userID])   # 取得對應的圖片，如果沒有取得，會是 False
    print(img_url)
    if img_url:
        # 如果有圖片網址，回傳圖片
        img_message = ImageSendMessage(original_content_url=img_url[0], preview_image_url=img_url[0])
        line_bot_api.reply_message(tk, img_message)
        os.system(f'rm {img_url[1]}')
    else:
        # 如果是 False，回傳文字
        text_message = TextSendMessage(text='找不到相關植栽圖片')
        line_bot_api.reply_message(tk, text_message)


def grow_plant(tk, mood_score, folder=shared_folder):
    img = [
        'plant1.png',
        ['plant2.png',
         'plant3.png',
         'plant4.png',
         'plant5.png'],
        ['plant2_2.png',
         'plant2_3.png',
         'plant2_4.png',
         'plant2_5.png'],
        ['plant3_2.png',
         'plant3_3.png',
         'plant3_4.png',
         'plant3_5.png']
    ]

    img = cv2.imread(os.path.join(folder, img[0]))

    for i, mood in enumerate(mood_score[:-1]):
        if mood < mood_ranges[i][0]:
            img2 = cv2.imread(os.path.join(folder, img[1][i]))
        elif mood < mood_ranges[i][1]:
            img2 = cv2.imread(os.path.join(folder, img[2][i]))
        else:
            img2 = cv2.imread(os.path.join(folder, img[3][i]))

        img[img2 != [0, 0, 0]] = img2[img2 != [0, 0, 0]]

    imgSavePath = os.path.join(folder, tk + '_plant.jpg')
    cv2.imwrite(imgSavePath, img)

    img_url = glucose_graph(client_id, imgSavePath)

    if img:
      return (img_url, imgSavePath)
    else:
      # 如果找不到對應的圖片，回傳 False
      return False

"""# 使用者"""

import pickle
import os
import datetime


def check_and_save_user(userID, folder=shared_folder, user_filename='users.pkl', mood_filename='mood_scores.pkl', action_filename='action_done.pkl'):
    # user file
    users = None
    with open(os.path.join(folder, user_filename), 'rb') as f:
        users = pickle.load(f)

    if userID in users.keys():
        return

    users[userID] = datetime.date.today()

    with open(os.path.join(folder, user_filename), 'wb') as f:
        pickle.dump(users, f)

    # mood score file
    mood_scores = None
    with open(os.path.join(folder, mood_filename), 'rb') as f:
        mood_scores = pickle.load(f)

    mood_scores[userID] = [0]

    with open(os.path.join(folder, mood_filename), 'wb') as f:
        pickle.dump(mood_scores, f)

    # action done file
    action_done = None
    with open(os.path.join(folder, action_filename), 'rb') as f:
        action_done = pickle.load(f)

    action_done[userID] = None

    with open(os.path.join(folder, action_filename), 'wb') as f:
        pickle.dump(action_done, f)

"""# 處理訊息"""

!touch '/content/drive/MyDrive/Line/share/users.pkl'

msgs = {}

with open('/content/drive/MyDrive/Line/share/users.pkl', 'wb') as f:
    pickle.dump(msgs, f)

import os


def handle_message(json_data, line_bot_api, msg_filename='msgs.pkl'):
    tk = json_data['events'][0]['replyToken']
    if json_data['events'][0]['type'] == 'postback':
        text = json_data['events'][0]['postback']['data']
    elif json_data['events'][0]['type'] == 'message':
        text = json_data['events'][0]['message']['text']
    userID = json_data['events'][0]['source']['userId']

    # check_and_save_user
    check_and_save_user(userID)

    # msgs file
    msgs = None
    with open(os.path.join(folder, msg_filename), 'rb') as f:
        msgs = pickle.load(f)


    if userID in msgs.keys():
        if msgs[userID][0][1] == 'diary':
            if tk != msgs[userID][0][0]:
                print('Start handle diary!')
                handle_diary(tk, userID, text, msgs[userID][0][2], line_bot_api)
                print('End handle diary!')
                del msgs[userID]

                with open(os.path.join(folder, msg_filename), 'wb') as f:
                    pickle.dump(msgs, f)

    elif text in diary_mood:
        msgs[userID] = [[tk, 'diary', diary_mood.index(text)]]

        with open(os.path.join(folder, msg_filename), 'wb') as f:
            pickle.dump(msgs, f)

    elif text == 'change-to-plant':
        handle_grow(tk, userID, line_bot_api)

"""# 執行"""

from flask_ngrok import run_with_ngrok                          # colab 使用，本機環境請刪除
from flask import Flask, request
from linebot import LineBotApi, WebhookHandler
from linebot.models import TextSendMessage, ImageSendMessage    # 載入 TextSendMessage 和 ImageSendMessage 模組
import json
import os
import cv2
from PIL import ImageFont, ImageDraw, Image
import numpy as np
import datetime

app = Flask(__name__)

@app.route("/", methods=['POST'])
def linebot():
    body = request.get_data(as_text=True)
    json_data = json.loads(body)
    print('Get message!')
    print(json_data)
    try:
        line_bot_api = LineBotApi(access_token)
        handler = WebhookHandler(secret)
        signature = request.headers['X-Line-Signature']
        handler.handle(body, signature)

        # handle_message(json_data, line_bot_api)

    except:
        print('error')

    return 'OK'

if __name__ == "__main__":
    run_with_ngrok(app)
    app.run()

"""# 測試"""

import datetime
import pickle

today = datetime.date.today()
yesterday = today - datetime.timedelta(days=1)

print(type(today))

write_data = {'1': today}
write_data['2'] = yesterday

with open('tmp.pkl', 'wb') as f:
    pickle.dump(write_data, f)

with open('tmp.pkl', 'rb') as f:
    read_data = pickle.load(f)

print(read_data)
print(read_data['1'])
print(read_data['2'])
print(type(read_data['1']))
print(read_data['1'] - read_data['2'])
print((read_data['1'] - read_data['2']).days)

tmp = [0]
for i in tmp[:-1]:
    print(1)

tmp = [0, 0]
for i in tmp[:-1]:
    print(2)

import cv2
import os
import numpy as np
from google.colab.patches import cv2_imshow

img1 = cv2.imread(os.path.join(shared_folder, 'plant1.png'))
img2 = cv2.imread(os.path.join(shared_folder, 'plant2.png'))

print(img2)
print(img2 == [0, 0, 0])
print(img2.shape)
print((img2 == ([0, 0, 0])).shape)
print((img2[img2 == [0, 0, 0]]).shape)
print((img1[img2 == [0, 0, 0]]).shape)

cv2_imshow(img1)
cv2_imshow(img2)

img1[img2 != [0, 0, 0]] = img2[img2 != [0, 0, 0]]

print(img1.shape)
cv2_imshow(img1)